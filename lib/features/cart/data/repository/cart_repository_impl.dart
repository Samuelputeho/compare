import 'package:compareitr/core/common/entities/cart_entity.dart';
import 'package:compareitr/core/error/exceptions.dart';
import 'package:compareitr/core/error/failures.dart';
import 'package:compareitr/features/cart/data/datasources/cart_remote_data_source.dart';
import 'package:compareitr/features/cart/domain/repository/cart_repository.dart';
import 'package:fpdart/fpdart.dart';

class CartRepositoryImpl implements CartRepository {
  final CartRemoteDataSource remoteDataSource;

  CartRepositoryImpl(this.remoteDataSource);

  @override
  Future<Either<Failure, CartEntity>> addCartItem({
    required String cartId,
    required String itemName,
    required String shopName,
    required String imageUrl,
    required double price,
    required int quantity,
  }) async {
    try {
      // Call the remote data source directly with the required parameters
      await remoteDataSource.addCartItem(
        cartId: cartId,
        itemName: itemName,
        shopName: shopName,
        imageUrl: imageUrl,
        price: price,
        quantity: quantity,
      );

      // Return a new CartEntity after successful addition.
      return right(CartEntity(
        id: '', // The id will be generated by the database
        cartId: cartId,
        itemName: itemName,
        shopName: shopName,
        price: price,
        quantity: quantity,
        imageUrl: imageUrl,
      ));
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> removeCartItem(String id) async {
    try {
      await remoteDataSource.removeCartItem(id);
      return right(null); // Return void on success.
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }

  @override
  Future<Either<Failure, List<CartEntity>>> getCartItems(String cartId) async {
    try {
      final cartModels = await remoteDataSource.getCartItems(cartId);

      // Convert CartModel list to CartEntity list.
      final cartEntities = cartModels.map((model) {
        return CartEntity(
          id: model.id,
          cartId: model.cartId,
          itemName: model.itemName,
          shopName: model.shopName,
          price: model.price,
          quantity: model.quantity,
          imageUrl: model.imageUrl,
        );
      }).toList();

      return right(cartEntities);
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> updateCartItem({
    required String cartId,
    required String productId,
    required int quantity,
  }) async {
    try {
      // Call the remote data source to update the cart item
      await remoteDataSource.updateCartItem(
        cartId: cartId,
        productId: productId,
        quantity: quantity,
      );

      // Return void on success.
      return right(null);
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }
}
