import 'package:compareitr/core/common/entities/recently_viewed_entity.dart';

import 'package:compareitr/core/common/models/recently_viewed_model.dart';
import 'package:compareitr/core/error/exceptions.dart';
import 'package:compareitr/core/error/failures.dart';

import 'package:compareitr/features/recently_viewed/data/datasource/recently_viewed_remote_data_source.dart';
import 'package:compareitr/features/recently_viewed/domain/repository/recent_repo.dart';
import 'package:fpdart/fpdart.dart';

class RecentRepoImpl implements RecentRepository {
  final RecentlyViewedRemoteDataSource remoteDataSource;

  RecentRepoImpl(this.remoteDataSource);

  @override
  Future<Either<Failure, RecentlyViewedEntity>> addRecentItem({
    required String name,
    required String image,
    required String measure,
    required String shopName,
    required String recentId,
    required double price,
  }) async {
    try {
      // Call the remote data source directly with the required parameters
      await remoteDataSource.addRecentItem(
          name: name,
          image: image,
          measure: measure,
          shopName: shopName,
          recentId: recentId,
          price: price);

      // Return a new CartEntity after successful addition.
      return right(RecentlyViewedEntity(
          id: '', // The id will be generated by the database
          name: name,
          image: image,
          measure: measure,
          shopName: shopName,
          recentId: recentId,
          price: price));
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }

  @override
  Future<Either<Failure, List<RecentlyViewedEntity>>> getRecentItems(
      String recentId) async {
    try {
      final recentModels = await remoteDataSource.getRecentItems(recentId);

      // Convert RecentModel list to CartEntity list.
      final recentEntities = recentModels.map((model) {
        return RecentlyViewedModel(
          name: model.name,
          image: model.image,
          measure: model.measure,
          shopName: model.shopName,
          recentId: model.recentId,
          price: model.price,
        );
      }).toList();

      return right(recentEntities);
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }
}
