import 'package:compareitr/core/common/entities/saved_entity.dart';
import 'package:compareitr/core/common/models/saved_model.dart';
import 'package:compareitr/core/error/exceptions.dart';
import 'package:compareitr/core/error/failures.dart';
import 'package:compareitr/features/saved/data/datasources/saved_remote_data_source.dart';
import 'package:compareitr/features/saved/domain/repository/saved_repository.dart';
import 'package:fpdart/fpdart.dart';

class SavedRepositoryImpl implements SavedRepository {
  final SavedRemoteDataSource remoteDataSource;

  SavedRepositoryImpl(this.remoteDataSource);

  @override
  Future<Either<Failure, SavedEntity>> addSavedItem({
    required String name,
    required String image,
    required String measure,
    required String shopName,
    required String savedId,
    required double price,
  }) async {
    try {
      // Call the remote data source directly with the required parameters
      await remoteDataSource.addSavedItem(
          name: name,
          image: image,
          measure: measure,
          shopName: shopName,
          savedId: savedId,
          price: price);

      // Return a new SavedEntity after successful addition.
      return right(SavedEntity(
          id: '', // The id will be generated by the database
          name: name,
          image: image,
          measure: measure,
          shopName: shopName,
          savedId: savedId,
          price: price));
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> removeSavedItem(String id) async {
    try {
      await remoteDataSource.removeSavedItem(id);
      return right(null); // Return void on success.
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }

  @override
  Future<Either<Failure, List<SavedEntity>>> getSavedItems(
      String savedId) async {
    try {
      final savedModels = await remoteDataSource.getSavedItems(savedId);

      // Convert SavedModel list to SavedEntity list.
      final savedEntities = savedModels.map((model) {
        return SavedModel(
          id: model.id, // Include the id from the fetched model
          name: model.name,
          image: model.image,
          measure: model.measure,
          shopName: model.shopName,
          savedId: model.savedId,
          price: model.price,
        );
      }).toList();

      return right(savedEntities);
    } on ServerException catch (e) {
      return left(Failure(e.message));
    } catch (e) {
      return left(Failure('Unexpected error: $e'));
    }
  }
}
